---
version: "3.9"

services:
  traefik:
    image: traefik:v2.5
    networks:
      ocis-net:
        aliases:
          - ${OCIS_DOMAIN:-ocis.owncloud.test}
          - ${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL:-ERROR}"
      # letsencrypt configuration
      - "--certificatesResolvers.http.acme.email=${TRAEFIK_ACME_MAIL:-example@example.org}"
      - "--certificatesResolvers.http.acme.storage=/certs/acme.json"
      - "--certificatesResolvers.http.acme.httpChallenge.entryPoint=http"
      # enable dasbhoard
      - "--api.dashboard=true"
      # define entrypoints
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.http.redirections.entryPoint.to=https"
      - "--entryPoints.http.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.https.address=:443"
      # docker provider (get configuration from container labels)
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "ocis_certs:/certs"
    labels:
      - "traefik.enable=${TRAEFIK_DASHBOARD:-false}"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH_USERS:-admin:$apr1$4vqie50r$YQAmQdtmz5n9rEALhxJ4l.}" # defaults to admin:admin
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.owncloud.test}`)"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.routers.traefik.tls.certresolver=http"
      - "traefik.http.routers.traefik.service=api@internal"
    logging:
      driver: "json-file"
    restart: always

  ocis:
    image: mdusher/ocis:latest
    build:
        context: ./ocis
        dockerfile: Dockerfile
    networks:
      ocis-net:
    #entrypoint: sleep 100000
    environment:
      # Keycloak IDP specific configuration
      OCIS_DISABLE_IDP: "true"
      PROXY_AUTOPROVISION_ACCOUNTS: "true"
      PROXY_OIDC_ISSUER: https://${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}/auth/realms/${KEYCLOAK_REALM:-oCIS}
      WEB_OIDC_AUTHORITY: https://${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}/auth/realms/${KEYCLOAK_REALM:-oCIS}
      WEB_OIDC_CLIENT_ID: ${OCIS_OIDC_CLIENT_ID:-web}
      WEB_OIDC_METADATA_URL: https://${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}/auth/realms/${KEYCLOAK_REALM:-oCIS}/.well-known/openid-configuration
      STORAGE_OIDC_ISSUER: https://${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}
      STORAGE_LDAP_IDP: https://${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}/auth/realms/${KEYCLOAK_REALM:-oCIS}
      # general config
      OCIS_URL: https://${OCIS_DOMAIN:-ocis.owncloud.test}
      OCIS_LOG_LEVEL: ${OCIS_LOG_LEVEL:-error} # make oCIS less verbose
      PROXY_OIDC_INSECURE: "${INSECURE:-false}" # needed if Traefik is using self generated certificates
      PROXY_TLS: "false" # do not use SSL between Traefik and oCIS
      # change default secrets
      IDP_LDAP_BIND_PASSWORD: ${IDP_LDAP_BIND_PASSWORD:-idp}
      STORAGE_LDAP_BIND_PASSWORD: ${STORAGE_LDAP_BIND_PASSWORD:-reva}
      OCIS_JWT_SECRET: ${OCIS_JWT_SECRET:-Pive-Fumkiu4}
      OCIS_TRANSFER_SECRET: ${STORAGE_TRANSFER_SECRET:-replace-me-with-a-transfer-secret}
      # # eos
      # ACCOUNTS_SERVICE_USER_USERNAME: daemon
      # ACCOUNTS_SERVICE_USER_UID: 2
      # ACCOUNTS_SERVICE_USER_GID: 2
      # dont think these are required when using keycloak?
      # STORAGE_METADATA_DRIVER: eos  
      # STORAGE_METADATA_ROOT: /eos/ocis-net/ocis/metadata
      # STORAGE_DRIVER_EOS_FORCE_SINGLEUSER_MODE: "true"
      # STORAGE_DRIVER_EOS_SINGLE_USERNAME: daemon

      # home storage driver
      STORAGE_HOME_DRIVER: eoshome
      STORAGE_DRIVER_EOS_LAYOUT: "{{substr 0 1 .Id.OpaqueId}}/{{.Id.OpaqueId}}"
      # common eos settings used for both drivers: eos and eoshome
      STORAGE_DRIVER_EOS_MASTER_URL: ${EOS_MGM_URL:-root://mgm.ocis-net:1094}
      STORAGE_DRIVER_EOS_SLAVE_URL: ${EOS_MGM_URL:-root://mgm.ocis-net:1094}
      STORAGE_DRIVER_EOS_NAMESPACE: "/eos/ocis-net/reva/users"
      # the eos end xrdcopy binaries use this env var to find the eos mgm
      EOS_MGM_URL: ${EOS_MGM_URL:-root://mgm.ocis-net:1094}
    volumes:
      - ocis_data:/var/tmp/ocis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ocis.entrypoints=https"
      - "traefik.http.routers.ocis.rule=Host(`${OCIS_DOMAIN:-ocis.owncloud.test}`)"
      - "traefik.http.routers.ocis.tls.certresolver=http"
      - "traefik.http.routers.ocis.service=ocis"
      - "traefik.http.services.ocis.loadbalancer.server.port=9200"
    logging:
      driver: "json-file"
    restart: always

  postgres:
    image: postgres:alpine
    networks:
      ocis-net:
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    logging:
      driver: "json-file"
    restart: always

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    networks:
      ocis-net:
    entrypoint: ["/bin/sh", "/opt/jboss/tools/docker-entrypoint-override.sh"]
    volumes:
      - ./keycloak/files/docker-entrypoint-override.sh:/opt/jboss/tools/docker-entrypoint-override.sh
      - ./keycloak/files/ocis-realm.dist.json:/opt/jboss/keycloak/ocis-realm.dist.json
    environment:
      OCIS_DOMAIN: ${OCIS_DOMAIN:-ocis.owncloud.test}
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: keycloak
      KEYCLOAK_USER: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/ocis-realm.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.entrypoints=https"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}`)"
      - "traefik.http.routers.keycloak.tls.certresolver=http"
      - "traefik.http.routers.keycloak.service=keycloak"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      # let /.well-known/openid-configuration be served by Keycloak
      - "traefik.http.middlewares.idp-headers.headers.customrequestheaders.X-Forwarded-Host=${KEYCLOAK_DOMAIN:-keycloak.owncloud.test}"
      - "traefik.http.middlewares.idp-prefix.addprefix.prefix=/auth/realms/${KEYCLOAK_REALM:-oCIS}"
      - "traefik.http.middlewares.idp-override.chain.middlewares=idp-headers,idp-prefix"
      - "traefik.http.routers.idp-wellknown.entrypoints=https"
      - "traefik.http.routers.idp-wellknown.tls.certresolver=http"
      - "traefik.http.routers.idp-wellknown.rule=Host(`${OCIS_DOMAIN:-ocis.owncloud.test}`) && Path(`/.well-known/openid-configuration`)"
      - "traefik.http.routers.idp-wellknown.middlewares=idp-override"
      - "traefik.http.routers.idp-wellknown.service=keycloak"
    depends_on:
      - postgres
    logging:
      driver: "json-file"
    restart: always

  mq:
    image: 'mdusher/eosdev:latest'
    build:
      context: ./eos
      dockerfile: Dockerfile
    entrypoint: /entrypoints/mq
    tty: true
    stdin_open: true
    env_file:
      - ./config/eos-docker.env
    hostname: mq.ocis-net
    networks:
      ocis-net:
        aliases:
          - mq.ocis-net
    volumes:
      - './eos/keytabs/:/keytabs/'
      - 'eos_logs:/var/log/eos'
      - 'eos_config:/var/eos/config'
      - 'eos_md:/var/eos/md'
      - 'eos_ns_queue:/var/eos/ns-queue'
    environment:
      EOS_SET_MASTER: 1
    healthcheck:
      test:
        - CMD-SHELL
        - nc -zv localhost 1097
      interval: 10s
      timeout: 5s
      retries: 5

  mgm:
    image: 'mdusher/eosdev:latest'
    build:
      context: ./eos
      dockerfile: Dockerfile
    entrypoint: /mgm-setup-override
    privileged: true
    tty: true
    stdin_open: true
    environment: 
      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}"
    env_file:
      - ./config/eos-docker.env
    hostname: mgm.ocis-net
    networks:
      ocis-net:
        aliases:
          - mgm.ocis-net
    volumes:
      - 'eos_disks:/disks'
      - './config/mgm-setup-override:/mgm-setup-override'
    volumes_from:
      - mq
    depends_on:
      qdb:
        condition: service_healthy
    environment:
      EOS_SET_MASTER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    healthcheck:
      test:
        - CMD-SHELL
        - eos ns | grep booted
      interval: 10s
      timeout: 5s
      retries: 5

  fst:
    image: 'mdusher/eosdev:latest'
    build:
      context: ./eos
      dockerfile: Dockerfile
    entrypoint: /entrypoints/fst
    tty: true
    stdin_open: true
    env_file:
      - ./config/eos-docker.env
    hostname: fst.ocis-net
    networks:
      ocis-net:
        aliases:
          - fst.ocis-net
    volumes:
      - './eos/keytabs/:/keytabs/'
      - 'eos_logs:/var/log/eos'
      - 'eos_disks:/disks'
    depends_on:
      - mgm
    environment:
      EOS_MGM_URL: 'root://mgm.ocis-net'
    healthcheck:
      test:
        - CMD-SHELL
        - nc -zv localhost 1095
      interval: 10s
      timeout: 5s
      retries: 5

  qdb:
    image: 'mdusher/eosdev:latest'
    build:
      context: ./eos
      dockerfile: Dockerfile
    entrypoint: /entrypoints/qdb
    tty: true
    stdin_open: true
    env_file:
      - ./config/eos-docker.env
    hostname: qdb.ocis-net
    networks:
      ocis-net:
        aliases:
          - qdb.ocis-net
    depends_on:
      - mq
    volumes:
      - './eos/keytabs/:/keytabs/'
      - 'eos_logs:/var/log/eos'
      - 'quarkdb_ns:/var/lib/quarkdb'
    environment:
      EOS_QDB_DIR: /var/lib/quarkdb/eosns
      EOS_QDB_PORT: '7777'
      EOS_QDB_MODE: raft
      EOS_QDB_CLUSTER_ID: 3d659c1a-e70f-43f0-bed4-941a2ca0765b
      EOS_QDB_NODES: 'qdb.ocis-net:7777'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - '-h'
        - localhost
        - '-p'
        - '7777'
        - raft-info
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  eos_disks:
  eos_md:
  eos_ns_queue:
  eos_config:
  eos_logs:
  quarkdb_ns:
  ocis_certs:
  ocis_data:
  postgres_data:


networks:
  ocis-net: